---
name: "⭕ Trunk Call"
on:
  workflow_call:
    secrets:
      trunk-token:
        description: >
          You can find a per-repo API token in the Trunk web app settings.
          This will cause results to be uploaded to the Trunk web app if this job is a scheduled job running on a branch, or if `check-mode` is set to 'all'.
        required: false
    inputs:
      username:
        description: "A username passed from the caller workflow"
        default: "z-shell"
        required: false
        type: string
      trunk_path:
        description: >
          Path to Trunk Launcher.
          If not provided, we'll look for it the repo root, `.trunk/bin` and `tools/`.
          If it can't be found anywhere and is not provided explicitly, we'll download it on demand."
        required: false
        type: string
      cache:
        default: "true"
        description: >
          Cache trunk downloads and results between runs.
          Caching is only needed when using ephemeral CI runners.
        required: false
        type: string
      upload-series:
        description: >
          Upload series name, for when `trunk-token` is provided. If not provided, we'll use the branch name.
        required: false
        type: string
      check-mode:
        description: >
          Trunk check mode. Leave unset to autodetect just changes.
          Set to 'all' to check the entire repository.
          If `trunk-token` is set with 'all', 'all' will also upload results to the Trunk web app.
        default: "all"
        required: false
        type: string
      arguments:
        description: Extra arguments to pass to trunk
        required: false
        type: string
      runs-on:
        description: "Required OS for workflow."
        default: "ubuntu-latest"
        required: false
        type: string
      get_dependencies:
        description: "Pass commands prepare or install dependencies"
        required: false
        type: string
      call_arguments1:
        description: "Pass first argument"
        required: false
        type: string
      call_arguments2:
        description: "Pass second argument"
        required: false
        type: string
      call_arguments3:
        description: "Pass third argument"
        required: false
        type: string
      call_on_fail:
        description: "Pass argument to run on failure"
        required: false
        type: string
      shell:
        description: "Shell to run workflow"
        required: false
        type: string
      working-directory:
        description: "The default working directory on the runner for steps, and the default location of your repository when using the checkout action."
        required: false
        type: string
      node_version:
        description: "Set Node versions"
        default: "16"
        required: false
        type: string
      npm_arguments:
        description: "Pass arguments to npm"
        required: false
        type: string
      pnpm_arguments:
        description: "Pass arguments to pnpm"
        required: false
        type: string
      yarn_arguments:
        description: "Pass arguments to pnpm"
        required: false
        type: string

jobs:
  matrix:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      output0: ${{ steps.step0.outputs.matrix0 }}
      output1: ${{ steps.step1.outputs.matrix1 }}
    #      output2: ${{ steps.step2.outputs.matrix2 }}
    #      output3: ${{ steps.step3.outputs.matrix3 }}
    steps:
      - name: "⤵️ Check out code from GitHub"
        uses: actions/checkout@v3
      - id: step0
        name: "🚀 Run 0"
        if: ${{ inputs.get_dependencies }}
        run: |
          MATRIX0="${{ inputs.get_dependencies }}"
          echo "MATRIX1=${MATRIX0}" >&2
          echo "::set-output name=matrix0::${MATRIX0}"
      - id: step1
        name: "🚀 Run 1"
        if: ${{ inputs.call_arguments1 }}
        run: |
          MATRIX1="${{ inputs.call_arguments1 }}"
          echo "MATRIX1=${MATRIX1}" >&2
          echo "::set-output name=matrix1::${MATRIX1}"
  #      - id: step2
  #        name: "🚀 Run 2"
  #        if: ${{ inputs.call_arguments2 }}
  #        run: |
  #          MATRIX2="${{ inputs.call_arguments2 }}"
  #          echo "MATRIX2=${MATRIX2}" >&2
  #          echo "::set-output name=matrix2::${MATRIX2}"
  #      - id: step3
  #        name: "🚀 Run 3"
  #        if: ${{ inputs.call_arguments3 }}
  #        run: |
  #          MATRIX3="${{ inputs.call_arguments3 }}"
  #          echo "MATRIX3=${MATRIX3}" >&2
  #          echo "::set-output name=matrix3::${MATRIX3}"

  trunk:
    runs-on: ${{ inputs.runs-on }}
    needs:
      - matrix
    steps:
      - name: "⤵️ Check out code from GitHub"
        uses: actions/checkout@v3
      - if: ${{ inputs.get_dependencies }}
        name: "🚀 Pre run"
        run: echo ${{needs.matrix.outputs.output0}}
      #     - if: ${{ inputs.call_arguments2 }}
      #       name: "🚀 Run 2"
      #       run: echo ${{needs.matrix.outputs.output2}}
      #     - if: ${{ inputs.call_arguments3 }}
      #       name: "🚀 Run 3"
      #       run: echo ${{needs.matrix.outputs.output3}}
      - if: ${{ inputs.pnpm_arguments }}
        name: "🟧 Setup pnpm"
        uses: pnpm/action-setup@v2
      - if: ${{ inputs.pnpm_arguments }}
        name: "🟩 Setup Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: "pnpm"
      - if: ${{ inputs.pnpm_arguments }}
        name: "▶️ Run pnpm"
        run: ${{ inputs.pnpm_arguments }}
      - if: ${{ inputs.yarn_arguments }}
        name: "🟩 Setup Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: "yarn"
      - if: ${{ inputs.yarn_arguments }}
        name: "▶️ Run yarn"
        run: ${{ inputs.yarn_arguments }}
      - if: ${{ inputs.npm_arguments }}
        name: "🟩 Setup Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
      - if: ${{ inputs.npm_arguments }}
        name: "▶️ Run npm"
        run: ${{ inputs.npm_arguments }}
      - if: ${{ inputs.call_arguments1 }}
        name: "🚀 Post run"
        run: echo ${{needs.matrix.outputs.output1}}
      - uses: trunk-io/trunk-action@22e948f7bb9f870bc6c42625585f1ef27e9c5afc
        with:
          trunk-path: ${{ inputs.trunk_path }}
          trunk-token: ${{ secrets.trunk-token }}
          check-mode: ${{ inputs.check-mode }}
          upload-series: ${{ inputs.upload-series }}
          arguments: ${{ inputs.arguments }}

      - if: ${{ failure() }}
        name: "🆘 Run on fail"
        run: ${{ inputs.call_on_fail }}
